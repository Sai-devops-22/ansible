# - name: basic
#   hosts: frontend
#   tasks:
#     - name: ping the server
#       ansible.builtin.ping:

# - name: printing
#   hosts: frontend
#   tasks:
#     - name: hello
#       ansible.builtin.debug:
#         msg: "hello world"

# - name: nginx
#   hosts: frontend
#   become: yes   
#   tasks:
#     - name: installing nginx
#       ansible.builtin.package:
#         name: nginx
#         state: present
#     - name: running nginx
#       ansible.builtin.service:
#         name: nginx
#         state: started
#         enabled: yes


# - name: play vars
#   hosts: frontend
#   vars:
#     COURSE: DEVOPS
#   vars_files:
#   - course.yaml
#   tasks:
#     - name: play vars in ansible
#       ansible.builtin.debug:
#         msg: "{{ COURSE }}"

#     - name: play tasks vars in ansible
#       vars:
#         COURSE: AWS
#       ansible.builtin.debug:
#         msg: "{{ COURSE }}"

#     - name: play file vars in ansible
#       ansible.builtin.debug:
#         msg: "{{ COURSE }}"

# - name: prompt
#   hosts: local
#   connection: local
#   vars_prompt:
#     name: EMP
#     prompt: "ENTER YOUR EMPID"
#     private: true
#   tasks:
#     - name: printing
#       ansible.builtin.debug:
#         msg: "youe empid is {{ EMP }}"
    

# - name: datatypes
#   hosts: frontend
#   vars:
#     LIST:
#     - SHELL
#     - ansible
#     - teraform
#     DICT:
#       SHELL: FIRST
#       ANSIBLE: SECOND
#       TERAFORM: THIRD
#   tasks:
#     - name: printing data types
#       ansible.builtin.debug:
#         msg: printing {{ LIST }} and {{ DICT }}


# - name: conditions
#   hosts: frontend
#   vars:
#     num: 12
#   tasks:
#     - name: conditions in ansible
#       ansible.builtin.debug:
#         msg: "printing num {{ num }} which is greater than 11"
#       when: num > 11

#     - name: conditions in ansible
#       ansible.builtin.debug:
#         msg: "printing num {{ num }} which is less than 11"
#       when: num < 11  

# - name: loops
#   hosts: frontend
#   tasks:
#     - name: loops in ansible
#       ansible.builtin.debug:
#         msg: "{{ item.first_course }}"
#         msg: "{{ item.state}}"
#       loop:
#       - {first_course: "mysql", state: "present"}
#       - {first_course: "sql", state: "present"}

# - name: functions
#   hosts: frontend
#   vars:
#     persons: 
#   tasks:
#     - name: functions in ansible
#       ansible.builtin.debug:
#         msg: "{{ persons | default('ramu' , true) }}"  #if the persons is empty then ramu will print


- name: copying repo by ansible
  hosts: frontend
  become: yes
  tasks:
    - name: copying repo from mongodb.repo
      ansible.builtin.copy:
        src: mongo.repo
        dest: /etc/yum.repos.d/mongo.repo

    - name: mongodb
      ansible.builtin.dnf:
        name: mongodb-org
        state: present

    - name: enabling the mongodb 
      ansible.builtin.service:
        name: mongodb-org
        state: started
        enabled: yes

    - name: replace by ansible
      ansible.builtin.replace:
        path: /etc/mongod.conf
        regexp: '127.0.0.1'
        replace: '0.0.0.0'

    - name: restarting the service
      ansible.builtin.service:
        name: mongodb
        state: restarted

# - name: mongo
#   hosts: mongodb
#   tasks:
#   - name: copying db
#     ansible.builtin.copy:
#       src: mongo.repo
#       dest: etc/yum.repos.d/mongo.repo 
  
#   - name: installing db
#     ansible.builtin.df:
#       name: mongodb-org
#       state: present

#   - name: enabling and start db
#     ansible.builtin.service:
#       name: mongodb-org
#       state: started
#       enabled: yes
  
#   - name: allow remote connections
#     ansible.builtin.replace:
#       path: /etc/mongod.conf
#       regexp: '127.0.0.1'
#       replace: '0.0.0.0'

#   - name: restarting mongodb
#     ansible.builtin.service:
#       name: mongodb-org
#       state: restarted


